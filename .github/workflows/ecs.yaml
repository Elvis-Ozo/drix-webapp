name: Build and deploy to ECS
on: 
    push:
        branches:
            - main
jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            id-token: write
        steps:
        #clone repository into the runner
            - name: clone repo
              uses: actions/checkout@v4
        #intsall maven and java
            - name: setup java and maven
              uses: actions/setup-java@v4
              with:
                  distribution: 'temurin'
                  java-version: '11'
        #to create artifact with maven
            - name: package-artifact
              run: mvn package
        #to run code analysis with sonarqube
            - name: code analysis with sonarqube
              run: mvn sonar:sonar -Dsonar.projectKey=drix-webapp-project1 -Dsonar.host.url=${{secrets.SONAR_HOST_URL}} -Dsonar.token=${{secrets.SONAR_LOGIN_TOKEN}}
        #PUBLISH to github packages
            - name: publish togithub packages
              run: mvn --batch-mode deploy
              env:
                  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        #have github actions authenticate into aws through OIDC
            - name: authenticate into aws
              uses: aws-actions/configure-aws-credentials@v4.1.0
              with: 
                  role-to-assume: arn:aws:iam::677276101416:role/github-actions-ecs-authentication-role
                  aws-region: eu-north-1
        #have github actions login into ecr
            - name: login into aws ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
        #use docker to build tag and push image
            - name: build tag and push image
              id: build-image
              env:
                  REGISTRY: ${{steps.login-ecr.outputs.registry}}
                  REPOSITORY: drix-webapp
                  IMAGE_TAG: ${{github.sha}}
              run: |
                  docker build -t $REGISTRY/$REPOSITORY:IMAGE_TAG .
                  echo "image=$REGISTRY/$REPOSITORY:IMAGE_TAG" >> $GITHUB_OUTPUT
                  docker push $REGISTRY/$REPOSITORY:IMAGE_TAG
        #create a new revision of the task definition
            - name: create a new revision of the task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: task-definition.json
                  container-name: drix-webapp-container
                  image: ${{steps.build-image.outputs.image}}
        #upadte your service with a new revision of the task definition file
            - name: update service with new revision of task defintion file
              uses: aws-actions/amazon-ecs-deploy-task-definition@v2
              with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  service: drix-webapp-service
                  cluster: drix-webapp-cluster
                  wait-for-service-stability: true

                  
